datasource db {
provider = "mongodb"
url = env("DATABASE_URL")
}
generator client {
provider = "prisma-client-js"
}
model Account {
id String @id @default(auto()) @map("_id") @db.ObjectId
userId String
type String
provider String
providerAccountId String
username String?
role String? @default("USER")
refresh_token String? @db.String
access_token String? @db.String
expires_at Int?
token_type String?
scope String?
id_token String? @db.String
session_state String?
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
@@unique([provider, providerAccountId])

}

model Session {
id String @id @default(auto()) @map("_id") @db.ObjectId
sessionToken String @unique
userId String
expires DateTime
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


model User {
id String @id @default(auto()) @map("_id") @db.ObjectId
name String?
email String? @unique
emailVerified DateTime?
image String?
accounts Account[]
sessions Session[]
orders Order[]
}
model VerificationToken {
id String @id @default(auto()) @map("_id") @db.ObjectId
identifier String
token String @unique
expires DateTime
@@unique([identifier, token])
}
model Product{
id String @id @default(auto()) @map("_id") @db.ObjectId
name String
description String
price Int
image String[]
category String
quantity Int
reviews Review[]
order Order @relation(fields: [id], references: [id], onDelete: Cascade)
}
model Review{
id String @id @default(auto()) @map("_id") @db.ObjectId
rating Int
comment String
product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
productId String
}
model Order{
id String @id @default(auto()) @map("_id") @db.ObjectId
total Int
user User @relation(fields: [userId], references: [id], onDelete: Cascade)
userId String
products Product[]
}